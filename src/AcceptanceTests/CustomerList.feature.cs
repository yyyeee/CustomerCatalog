// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace yyyeee.CustomerCatalog.AcceptanceTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CustomerListFeature : Xunit.IClassFixture<CustomerListFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CustomerList.feature"
#line hidden
        
        public CustomerListFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Customer list", "\tIn order to contact customers\r\n\tAs a user\r\n\tI want to be able to manage customer" +
                    "s on list", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(CustomerListFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="See list of customers")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer list")]
        [Xunit.TraitAttribute("Description", "See list of customers")]
        [Xunit.TraitAttribute("Category", "customerList")]
        public virtual void SeeListOfCustomers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See list of customers", new string[] {
                        "customerList"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status",
                        "CreationTime"});
            table1.AddRow(new string[] {
                        "Customer1",
                        "1",
                        "2018-03-27 11:00"});
            table1.AddRow(new string[] {
                        "Customer2",
                        "2",
                        "2018-02-21 12:00"});
            table1.AddRow(new string[] {
                        "Customer3",
                        "3",
                        "2018-03-17 11:22"});
#line 8
 testRunner.Given("The following customers exist", ((string)(null)), table1, "Given ");
#line 13
 testRunner.When("I open the list of customers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status",
                        "CreationTime"});
            table2.AddRow(new string[] {
                        "Customer1",
                        "Prospective",
                        "Mar 27th 18"});
            table2.AddRow(new string[] {
                        "Customer3",
                        "Non-active",
                        "Mar 17th 18"});
            table2.AddRow(new string[] {
                        "Customer2",
                        "Current",
                        "Feb 21st 18"});
#line 14
 testRunner.Then("the following customers appear in the list", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Filter list of customers by name")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer list")]
        [Xunit.TraitAttribute("Description", "Filter list of customers by name")]
        [Xunit.TraitAttribute("Category", "customerList")]
        public virtual void FilterListOfCustomersByName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter list of customers by name", new string[] {
                        "customerList"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status",
                        "CreationTime"});
            table3.AddRow(new string[] {
                        "Customer1",
                        "1",
                        "2018-03-27 11:00"});
            table3.AddRow(new string[] {
                        "Customer2",
                        "2",
                        "2018-02-21 12:00"});
            table3.AddRow(new string[] {
                        "Customer3",
                        "3",
                        "2018-03-17 11:22"});
#line 23
 testRunner.Given("The following customers exist", ((string)(null)), table3, "Given ");
#line 28
 testRunner.When("I open the list of customers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.When("I filter the list by name with value \'Customer1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status",
                        "CreationTime"});
            table4.AddRow(new string[] {
                        "Customer1",
                        "Prospective",
                        "Mar 27th 18"});
#line 30
 testRunner.Then("the following customers appear in the list", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Sort by name list of customers")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer list")]
        [Xunit.TraitAttribute("Description", "Sort by name list of customers")]
        [Xunit.TraitAttribute("Category", "customerList")]
        public virtual void SortByNameListOfCustomers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort by name list of customers", new string[] {
                        "customerList"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status",
                        "CreationTime"});
            table5.AddRow(new string[] {
                        "Customer1",
                        "1",
                        "2018-03-27 11:00"});
            table5.AddRow(new string[] {
                        "Customer2",
                        "2",
                        "2018-02-21 12:00"});
            table5.AddRow(new string[] {
                        "Customer3",
                        "3",
                        "2018-03-17 11:22"});
#line 36
 testRunner.Given("The following customers exist", ((string)(null)), table5, "Given ");
#line 41
 testRunner.When("I open the list of customers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.When("I sort by name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status",
                        "CreationTime"});
            table6.AddRow(new string[] {
                        "Customer1",
                        "Prospective",
                        "Mar 27th 18"});
            table6.AddRow(new string[] {
                        "Customer2",
                        "Current",
                        "Feb 21st 18"});
            table6.AddRow(new string[] {
                        "Customer3",
                        "Non-active",
                        "Mar 17th 18"});
#line 43
 testRunner.Then("the following customers appear in the list", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Sort filtered list of customers")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer list")]
        [Xunit.TraitAttribute("Description", "Sort filtered list of customers")]
        [Xunit.TraitAttribute("Category", "customerList")]
        public virtual void SortFilteredListOfCustomers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sort filtered list of customers", new string[] {
                        "customerList"});
#line 50
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status",
                        "CreationTime"});
            table7.AddRow(new string[] {
                        "Customer2",
                        "2",
                        "2018-02-21 12:00"});
            table7.AddRow(new string[] {
                        "Customer1",
                        "1",
                        "2018-03-27 11:00"});
            table7.AddRow(new string[] {
                        "Test",
                        "3",
                        "2018-03-17 11:22"});
#line 51
 testRunner.Given("The following customers exist", ((string)(null)), table7, "Given ");
#line 56
 testRunner.When("I open the list of customers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
 testRunner.When("I sort by name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.When("I filter the list by name with value \'Customer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status",
                        "CreationTime"});
            table8.AddRow(new string[] {
                        "Customer1",
                        "Prospective",
                        "Mar 27th 18"});
            table8.AddRow(new string[] {
                        "Customer2",
                        "Current",
                        "Feb 21st 18"});
#line 59
 testRunner.Then("the following customers appear in the list", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Add customer to list")]
        [Xunit.TraitAttribute("FeatureTitle", "Customer list")]
        [Xunit.TraitAttribute("Description", "Add customer to list")]
        [Xunit.TraitAttribute("Category", "customerList")]
        public virtual void AddCustomerToList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add customer to list", new string[] {
                        "customerList"});
#line 65
this.ScenarioSetup(scenarioInfo);
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CustomerListFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CustomerListFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
